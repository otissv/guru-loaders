{"version":3,"sources":["../src/index-loader.js"],"names":["schema","json","resolver","configLoader","databaseLoader","jsonLoader","middlewareLoader","modelLoader","resolverLoader","routeLoader","schemaLoader","console","log","loaders"],"mappings":"AAAA;;;;AAIA;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;uDAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEU,6BAFV;;AAAA;AAELA,kBAFK;AAAA;AAAA,mBAGQ,0BAAgBA,MAAhB,CAHR;;AAAA;AAGLC,gBAHK;AAAA;AAAA,mBAIY,+BAAoB,EAAED,cAAF,EAAUC,UAAV,EAApB,CAJZ;;AAAA;AAILC,oBAJK;;;AAMX,iCAAM,EAAEF,cAAF,EAAUE,kBAAV,EAAN;;AANW;AAAA,mBASW,kCATX;;AAAA;AAAA;AAAA;AAAA,mBAUa,gCAVb;;AAAA;AAAA;AAAA,0BAWGD,IAXH;AAAA;AAAA,mBAYe,iCAZf;;AAAA;AAAA;AAAA;AAAA,mBAaU,4BAbV;;AAAA;AAAA;AAAA,0BAcOC,QAdP;AAAA;AAAA,mBAeU,6BAfV;;AAAA;AAAA;AAAA,0BAgBKF,MAhBL;AAAA;AASTG,0BATS;AAUTC,4BAVS;AAWTC,wBAXS;AAYTC,8BAZS;AAaTC,yBAbS;AAcTC,4BAdS;AAeTC,yBAfS;AAgBTC,0BAhBS;AAAA;;AAAA;AAAA;AAAA;;AAmBXC,oBAAQC,GAAR;;AAnBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeC,O;;;;SAAAA,O","file":"index-loader.js","sourcesContent":["/*\n* Index loader\n*/\n\n'use strict';\nimport databasesLoaderAsync from './databases/databases-loader';\nimport environmentLoaderAsync from './environment/environment-loader';\nimport jsonLoaderAsync from './json/json-loader';\nimport middlewareLoaderAsync from './middleware/middleware-loader';\nimport modelLoaderAsync from './model/model-loader';\nimport resolverLoaderAsync from './resolver/resolvers-loader';\nimport routesLoaderAsync from './routes/routes-loader';\nimport schemaLoaderAsync from './schema/schema-loader';\nimport tests from './tests';\n\nexport default async function loaders () {\n  try {\n    const schema = await schemaLoaderAsync();\n    const json = await jsonLoaderAsync(schema);\n    const resolver = await resolverLoaderAsync({ schema, json });\n\n    tests({ schema, resolver });\n\n    return {\n      configLoader: await environmentLoaderAsync(),\n      databaseLoader: await databasesLoaderAsync(),\n      jsonLoader: json,\n      middlewareLoader: await middlewareLoaderAsync(),\n      modelLoader: await modelLoaderAsync(),\n      resolverLoader: resolver,\n      routeLoader: await routesLoaderAsync(),\n      schemaLoader: schema\n    };\n  } catch (error) {\n    console.log(error);\n  }\n}\n"]}