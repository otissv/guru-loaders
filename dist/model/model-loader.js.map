{"version":3,"sources":["../../src/model/model-loader.js"],"names":["schema","validationPaths","validation","map","mod","require","default","name","reduce","definition","models","previous","model","modelValidation","filter","i","Validation","validationField","length","fields","isValid","data","console","log","modelLoaderAsync"],"mappings":";AAAA;;;;AAIA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;uDAEe,iBAAiCA,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGmB,iDAHnB;;AAAA;AAGLC,2BAHK;AAKLC,sBALK,GAKQD,gBAAgBE,GAAhB,CAAoB,sBAAc;AACnD,kBAAMC,MAAMC,QAAQH,UAAR,EAAoBI,OAAhC;AACA,qBAAO;AACLC,sBAAMH,IAAIG,IADL;AAELL,4BAAYE;AAFP,eAAP;AAID,aANkB,CALR;AAAA,6CAaJ,mBAASI,MAAT,CACLR,OAAOS,UAAP,CAAkBC,MADb,EAEL,UAACC,QAAD,EAAWC,KAAX,EAAqB;AACnB,kBAAMC,kBAAkBX,WAAWY,MAAX,CAAkB;AAAA,uBAAKC,EAAER,IAAF,KAAWK,MAAML,IAAtB;AAAA,eAAlB,CAAxB;AACA,kBAAIS,mBAAJ;AACA,kBAAIC,wBAAJ;;AAEA,kBAAIJ,gBAAgBK,MAAhB,GAAyB,CAA7B,EAAgC;AAC9BF,6BAAa,IAAIH,gBAAgB,CAAhB,EAAmBX,UAAvB,EAAb;AACAe,kCAAkB,uBAAWD,UAAX,EAAuB,CAAvB,CAAlB;AACD;;AAED,kBAAMhB,SAASa,gBAAgBK,MAAhB,GAAyB,CAAzB,GACX,kBAAM,CACNN,MAAMO,MADA,sBAGHF,eAHG,eAICL,MAAMO,MAAN,CAAaF,eAAb,CAJD;AAKFf,4BAAYc,WAAWC,eAAX;AALV,kBAAN,CADW,GAUXL,MAAMO,MAVV;;AAYA,kCACKR,QADL,sBAEGC,MAAML,IAFT,EAEgB;AACZP,8BADY;AAEZoB,uBAFY,mBAEHC,IAFG,EAEG;AACb,yBAAO,6BAAcrB,MAAd,EAAsBqB,IAAtB,CAAP;AACD;AAJW,eAFhB;AASD,aAjCI,EAkCL,EAlCK,CAbI;;AAAA;AAAA;AAAA;;AAkDXC,oBAAQC,GAAR;;AAlDW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeC,gB;;;;SAAAA,gB","file":"model-loader.js","sourcesContent":["/*\n* Models loader\n*/\n\n'use string';\n\nimport Bluebird from 'bluebird';\nimport isSchemaValid from 'is-schema-valid';\nimport { globModulePathsAsync, getMethods, merge } from '../utils';\n\nexport default async function modelLoaderAsync (schema) {\n  try {\n    //\n    const validationPaths = await globModulePathsAsync(`**/validation`);\n\n    const validation = validationPaths.map(validation => {\n      const mod = require(validation).default;\n      return {\n        name: mod.name,\n        validation: mod\n      };\n    });\n\n    return Bluebird.reduce(\n      schema.definition.models,\n      (previous, model) => {\n        const modelValidation = validation.filter(i => i.name === model.name);\n        let Validation;\n        let validationField;\n\n        if (modelValidation.length > 0) {\n          Validation = new modelValidation[0].validation();\n          validationField = getMethods(Validation)[0];\n        }\n\n        const schema = modelValidation.length > 0\n          ? merge([\n            model.fields,\n            {\n              [validationField]: {\n                ...model.fields[validationField],\n                validation: Validation[validationField]\n              }\n            }\n          ])\n          : model.fields;\n\n        return {\n          ...previous,\n          [model.name]: {\n            schema,\n            isValid (data) {\n              return isSchemaValid(schema)(data);\n            }\n          }\n        };\n      },\n      {}\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n"]}