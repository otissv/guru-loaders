{"version":3,"sources":["../../src/schema/schema-definition.js"],"names":["astDocument","typeDefinitionList","schemaDefinition","definitions","reduce","document","node","definition","kind","initObj","contextStore","context","types","previous","current","fields","obj","field","includes","type","name","resolve","query","args","Class","connectors","Object","defineProperty","value","directives","enums","inputs","interface","scalars","json","definitionList","unions","operations","Mutation","Query","createDefinitionList","createTypeDefinitions","createObjectFields","typeName","required","Boolean","arguments","arg","defaultValue","InputObjectTypeDefinition","EnumTypeDefinition","values","map","v","ObjectTypeDefinition"],"mappings":"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","file":"schema-definition.js","sourcesContent":["/*\n* Schema Definition\n*/\n\n'use strict';\n\nimport { merge } from '../utils';\nimport camel from 'to-camel-case';\n\nconst initObj = {\n  context: [],\n  directives: [],\n  enums: [],\n  inputs: [],\n  interface: [],\n  scalars: [],\n  types: [],\n  json: [],\n  definitionList: [],\n  unions: [],\n  operations: {\n    Mutation: [],\n    Query: []\n  }\n};\n\nfunction createDefinitionList ({ document, node }) {\n  return [\n    ...document.definitionList,\n    {\n      kind: node.kind,\n      name: node.name.value\n    }\n  ];\n}\n\nfunction createTypeDefinitions ({ document, node, type }) {\n  return {\n    ...document,\n    [type]: [\n      ...document[type],\n      {\n        name: node.name.value,\n        fields: createObjectFields(node)\n      }\n    ],\n    definitionList: createDefinitionList({ document, node }),\n    json: [\n      ...document.json,\n      {\n        name: node.name.value,\n        fields: node.fields.reduce((obj, field) => {\n          let typeName = field.type.type\n            ? camel(field.type.type.name.value)\n            : camel(field.type.name.value);\n\n          return {\n            ...obj,\n            [field.name.value]: {\n              type: field.kind === 'ListType' ? [typeName] : typeName,\n              required: Boolean(field.type.kind === 'NonNullType')\n            }\n          };\n        }, {})\n      }\n    ]\n  };\n}\n\nfunction createObjectFields (node) {\n  return node.fields.reduce(\n    (obj, field) => [\n      ...obj,\n      {\n        name: field.name.value,\n        type: {\n          kind: field.type.kind,\n          name: field.type.type\n            ? field.type.type.name.value\n            : field.type.name.value\n        },\n        arguments: field.arguments\n          ? field.arguments.reduce((previous, arg) => {\n            const typeName = arg.type.type\n              ? arg.type.type.name.value\n              : arg.type.name.value;\n\n            return [\n              ...previous,\n              {\n                kind: arg.type.kind,\n                name: arg.name.value,\n                type: typeName,\n                defaultValue: arg.defaultValue || null\n              }\n            ];\n          }, [])\n          : null\n      }\n    ],\n    []\n  );\n}\n\nconst definition = {\n  InputObjectTypeDefinition ({ document, node }) {\n    return createTypeDefinitions({ document, node, type: 'inputs' });\n  },\n\n  EnumTypeDefinition ({ document, node }) {\n    return {\n      ...document,\n      enums: [\n        ...document.enums,\n        {\n          name: node.name.value,\n          values: node.values.map(v => v.name.value)\n        }\n      ],\n      definitionList: createDefinitionList({ document, node })\n    };\n  },\n\n  ObjectTypeDefinition ({ document, node }) {\n    const typeName = node.name.value;\n\n    if (node.name.value === 'Mutation' || node.name.value === 'Query') {\n      return {\n        ...document,\n        operations: {\n          ...document.operations,\n          [typeName]: [\n            ...document.operations[typeName],\n            ...createObjectFields(node)\n          ]\n        }\n      };\n    } else {\n      return createTypeDefinitions({ document, node, type: 'types' });\n    }\n  }\n};\n\nexport default function ({ astDocument, typeDefinitionList }) {\n  const schemaDefinition = astDocument.definitions.reduce((document, node) => {\n    return (\n      (definition[node.kind] && definition[node.kind]({ document, node })) ||\n      document\n    );\n  }, initObj);\n\n  let contextStore = {};\n\n  schemaDefinition.context = schemaDefinition.types.reduce(\n    (previous, current) => {\n      const context = () => ({\n        ...current.fields.reduce((obj, field) => {\n          if (typeDefinitionList.includes(field.type.name)) {\n            // add resolve to context store\n            if (contextStore[field.name] == null) {\n              const resolve = (query, args, context) => {\n                const Class = new context.connectors[\n                  (camel(field.type.name))\n                ]();\n\n                return Class.resolve({\n                  query,\n                  args: query[field.name],\n                  ...context\n                });\n              };\n\n              Object.defineProperty(resolve, 'name', { value: field.name });\n\n              contextStore[field.name] = resolve;\n            }\n\n            return merge([\n              obj,\n              {\n                [current.name]: { [field.name]: contextStore[field.name] }\n              }\n            ]);\n          } else {\n            return obj;\n          }\n        }, {})\n      });\n\n      if (context()[current.name]) {\n        return merge([previous, context()]);\n      } else {\n        return previous;\n      }\n    },\n    {}\n  );\n\n  return schemaDefinition;\n}\n"]}