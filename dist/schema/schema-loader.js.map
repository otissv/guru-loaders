{"version":3,"sources":["../../src/schema/schema-loader.js"],"names":["pathsAsync","loadFilesAsync","fileName","catch","console","log","error","paths","reduce","previous","current","currentFile","mutation","query","typeDefinition","schemaMutation","schemaQuery","schemaMutationDefinition","schemaQueryDefinition","length","schema","astDocument","typeDefinitionList","match","map","str","replace","trim","resolve","ast","typeList","definition","schemaLoaderAsync"],"mappings":"AAAA;;;;AAIA;;;;;QAYgBA,U,GAAAA,U;QAMAC,c,GAAAA,c;;AAhBhB;;AACA;;;;AACA;;AAKA;;;;AACA;;;;;;AAEO,SAASD,UAAT,CAAqBE,QAArB,EAA+B;AACpC,SAAO,4CAA8BA,QAA9B,EAA0CC,KAA1C,CAAgD;AAAA,WACrDC,QAAQC,GAAR,CAAYC,KAAZ,CADqD;AAAA,GAAhD,CAAP;AAGD;;AAEM,SAASL,cAAT,CAAyBM,KAAzB,EAAgC;AAAA;;AACrC,SAAO,mBAASC,MAAT,CACLD,KADK;AAAA,yDAEL,iBAAOE,QAAP,EAAiBC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAE8B,qBAASA,OAAT,CAF9B;;AAAA;AAEUC,yBAFV;AAAA,+CAIcF,QAJd,UAI2BE,WAJ3B;;AAAA;AAAA;AAAA;;AAMIP,sBAAQC,GAAR;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFK;;AAAA;AAAA;AAAA;AAAA,OAWL,EAXK,EAYLF,KAZK,CAYC;AAAA,WAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,GAZD,CAAP;AAaD;;;wDAEc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEY,sBAAU,CAACN,UAAD,EAAaC,cAAb,CAAV,EACrB,gBADqB,CAFZ;;AAAA;AAELW,oBAFK;AAAA;AAAA,mBAMS,sBAAU,CAACZ,UAAD,EAAaC,cAAb,CAAV,EAAwC,aAAxC,CANT;;AAAA;AAMLY,iBANK;AAAA;AAAA,mBAQkB,sBAAU,CAACb,UAAD,EAAaC,cAAb,CAAV,EAC3B,YAD2B,CARlB;;AAAA;AAQLa,0BARK;AAYPC,0BAZO,GAYU,EAZV;AAaPC,uBAbO,GAaO,EAbP;AAcPC,oCAdO,GAcoB,EAdpB;AAePC,iCAfO,GAeiB,EAfjB;;;AAiBX,gBAAIN,YAAYA,SAASO,MAAT,GAAkB,CAAlC,EAAqC;AACnCJ,+BAAiB,oBAAjB;AACAE,mEAEFL,QAFE;AAKD;;AAED,gBAAIC,SAASA,MAAMM,MAAN,GAAe,CAA5B,EAA+B;AAC7BH,4BAAc,cAAd;AACAE,2DACFL,KADE;AAID;;AAEKO,kBAlCK,UAmCbN,cAnCa,UAoCbG,wBApCa,UAqCbC,qBArCa,qEAyCXH,cAzCW,YA0CXC,WA1CW;AA4CLK,uBA5CK,GA4CS,oBAAMD,MAAN,CA5CT;AA8CLE,8BA9CK,GA8CgBR,eACxBS,KADwB,CAClB,YADkB,EAExBC,GAFwB,CAEpB;AAAA,qBAAOC,IAAIC,OAAJ,CAAY,MAAZ,EAAoB,EAApB,EAAwBA,OAAxB,CAAgC,GAAhC,EAAqC,EAArC,EAAyCC,IAAzC,EAAP;AAAA,aAFoB,CA9ChB;AAAA;AAAA,mBAkDE,mBAASC,OAAT,CAAiB;AAC5BC,mBAAKR,WADuB;AAE5BS,wBAAUR,kBAFkB;AAG5BS,0BAAY,gCAAiB,EAAEV,wBAAF,EAAeC,sCAAf,EAAjB;AAHgB,aAAjB,CAlDF;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAwDXlB,oBAAQC,GAAR;;AAxDW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAe2B,iB;;;;SAAAA,iB","file":"schema-loader.js","sourcesContent":["/*\n* Schema loader\n*/\n\n'use strict';\n\nimport { parse } from 'graphql';\nimport schemaDefinition from './schema-definition';\nimport {\n  extensionTypes,\n  extensionSchemaQuery\n} from '../graphql-extend/graphql-extend-schema';\n\nimport Bluebird from 'bluebird';\nimport { globGQLModulePathsAsync, pipeAsync, readFile } from '../utils';\n\nexport function pathsAsync (fileName) {\n  return globGQLModulePathsAsync(`**/${fileName}`).catch(error =>\n    console.log(error)\n  );\n}\n\nexport function loadFilesAsync (paths) {\n  return Bluebird.reduce(\n    paths,\n    async (previous, current) => {\n      try {\n        const currentFile = await readFile(current);\n\n        return `${previous}\\n${currentFile}`;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    ''\n  ).catch(error => console.log(error));\n}\n\nexport default async function schemaLoaderAsync () {\n  try {\n    const mutation = await pipeAsync([pathsAsync, loadFilesAsync])(\n      'schemaMutation'\n    );\n\n    const query = await pipeAsync([pathsAsync, loadFilesAsync])('schemaQuery');\n\n    const typeDefinition = await pipeAsync([pathsAsync, loadFilesAsync])(\n      'schemaType'\n    );\n\n    let schemaMutation = '';\n    let schemaQuery = '';\n    let schemaMutationDefinition = '';\n    let schemaQueryDefinition = '';\n\n    if (mutation && mutation.length > 0) {\n      schemaMutation = 'mutation: Mutation';\n      schemaMutationDefinition = `\ntype Mutation {\n  ${mutation}\n}\n`;\n    }\n\n    if (query && query.length > 0) {\n      schemaQuery = 'query: Query';\n      schemaQueryDefinition = `type Query {\n  ${query}\n  ${extensionSchemaQuery}\n}`;\n    }\n\n    const schema = `\n${typeDefinition}\n${schemaMutationDefinition}\n${schemaQueryDefinition}\n${extensionTypes}\n\nschema {\n  ${schemaMutation}\n  ${schemaQuery}\n}`;\n    const astDocument = parse(schema);\n\n    const typeDefinitionList = typeDefinition\n      .match(/type(.*){/g)\n      .map(str => str.replace('type', '').replace('{', '').trim());\n\n    return await Bluebird.resolve({\n      ast: astDocument,\n      typeList: typeDefinitionList,\n      definition: schemaDefinition({ astDocument, typeDefinitionList })\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n"]}