{"version":3,"sources":["../../src/json/json-loader.js"],"names":["schema","validationPaths","customValidation","map","mod","require","validationPath","default","name","Validation","reduce","definition","json","previous","jsonValidation","filter","i","validationField","length","fields","validation","isValid","data","console","log","jsonLoaderAsync"],"mappings":";AAAA;;;;AAIA;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;uDAEe,iBAAgCA,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEmB,iDAFnB;;AAAA;AAELC,2BAFK;AAILC,4BAJK,GAIcD,gBAAgBE,GAAhB,CAAoB,0BAAkB;AAC7D,kBAAMC,MAAMC,QAAQC,cAAR,EAAwBC,OAApC;AACA,qBAAO;AACLC,sBAAMJ,IAAII,IADL;AAELC,4BAAYL;AAFP,eAAP;AAID,aANwB,CAJd;AAAA,6CAYJ,mBAASM,MAAT,CACLV,OAAOW,UAAP,CAAkBC,IADb,EAEL,UAACC,QAAD,EAAWD,IAAX,EAAoB;AAClB,kBAAME,iBAAiBZ,iBAAiBa,MAAjB,CACrB;AAAA,uBAAKC,EAAER,IAAF,KAAWI,KAAKJ,IAArB;AAAA,eADqB,CAAvB;AAGA,kBAAIC,mBAAJ;AACA,kBAAIQ,wBAAJ;;AAEA,kBAAIH,eAAeI,MAAf,GAAwB,CAA5B,EAA+B;AAC7BT,6BAAa,IAAIK,eAAe,CAAf,EAAkBL,UAAtB,EAAb;AACAQ,kCAAkB,uBAAWR,UAAX,EAAuB,CAAvB,CAAlB;AACD;;AAED,kBAAMT,SACJc,eAAeI,MAAf,GAAwB,CAAxB,GACI,kBAAM,CACNN,KAAKO,MADC,sBAGHF,eAHG,eAICL,KAAKO,MAAL,CAAYF,eAAZ,CAJD;AAKFG,4BAAYX,WAAWQ,eAAX;AALV,kBAAN,CADJ,GAUIL,KAAKO,MAXX;;AAaA,kCACKN,QADL,sBAEG,2BAAMD,KAAKJ,IAAX,CAFH,EAEsB;AAClBR,8BADkB;AAElBqB,uBAFkB,mBAETC,IAFS,EAEH;AACb,yBAAO,6BAAcV,KAAKO,MAAnB,EAA2BG,IAA3B,CAAP;AACD;AAJiB,eAFtB;AASD,aApCI,EAqCL,EArCK,CAZI;;AAAA;AAAA;AAAA;;AAoDXC,oBAAQC,GAAR;;AApDW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeC,e;;;;SAAAA,e","file":"json-loader.js","sourcesContent":["/*\n* JSON loader\n*/\n\n'use string';\n\nimport Bluebird from 'bluebird';\nimport isSchemaValid from 'is-schema-valid';\nimport camel from 'to-camel-case';\nimport { globModulePathsAsync, getMethods, merge } from '../utils';\n\nexport default async function jsonLoaderAsync (schema) {\n  try {\n    const validationPaths = await globModulePathsAsync(`**/validation`);\n\n    const customValidation = validationPaths.map(validationPath => {\n      const mod = require(validationPath).default;\n      return {\n        name: mod.name,\n        Validation: mod\n      };\n    });\n\n    return Bluebird.reduce(\n      schema.definition.json,\n      (previous, json) => {\n        const jsonValidation = customValidation.filter(\n          i => i.name === json.name\n        );\n        let Validation;\n        let validationField;\n\n        if (jsonValidation.length > 0) {\n          Validation = new jsonValidation[0].Validation();\n          validationField = getMethods(Validation)[0];\n        }\n\n        const schema =\n          jsonValidation.length > 0\n            ? merge([\n              json.fields,\n              {\n                [validationField]: {\n                  ...json.fields[validationField],\n                  validation: Validation[validationField]\n                }\n              }\n            ])\n            : json.fields;\n\n        return {\n          ...previous,\n          [camel(json.name)]: {\n            schema,\n            isValid (data) {\n              return isSchemaValid(json.fields)(data);\n            }\n          }\n        };\n      },\n      {}\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n"]}