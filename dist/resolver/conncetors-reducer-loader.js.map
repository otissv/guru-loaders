{"version":3,"sources":["../../src/resolver/conncetors-reducer-loader.js"],"names":["loadedResolverModules","reduce","previous","current","currentModule","module","prototype","currentName","name","Module","currentStaticProperties","Object","keys","previousModule","previousMethods","previousStaticProperties","modulePrototype","Obj","currentMethods","methods","Constructor","defineProperty","value","writable","defineProperties","constructor","protoProps","staticProps","props","length","i","descriptor","enumerable","configurable","key","map","catch","console","log","error","connectorReducerAsync"],"mappings":"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","file":"conncetors-reducer-loader.js","sourcesContent":["import Bluebird from 'bluebird';\n\nimport { capitalize, classMethods, getAllMethods, merge } from '../utils';\n\nexport default async function connectorReducerAsync (loadedResolverModules) {\n  return Bluebird.reduce(\n    loadedResolverModules,\n    (previous, current) => {\n      const currentModule = current.module;\n      if (current.module.prototype == null) return previous;\n\n      const currentName = current.name;\n      const Module = new current.module();\n      const currentStaticProperties = Object.keys(Module);\n      let previousModule;\n      let previousMethods;\n      let previousStaticProperties = [];\n\n      if (previous[currentName]) {\n        previousModule = new previous[currentName]();\n        previousStaticProperties = Object.keys(previousModule);\n\n        previousMethods = classMethods({\n          currentName,\n          modulePrototype: getAllMethods(previous[currentName].prototype),\n          Obj: previous[currentName]\n        });\n      } else {\n        previousMethods = {};\n      }\n\n      const currentMethods = classMethods({\n        currentName,\n        modulePrototype: getAllMethods(currentModule.prototype),\n        Obj: currentModule\n      });\n\n      const methods = merge([previousMethods, currentMethods]);\n\n      // create new class\n      class Constructor {}\n\n      // set class name to current module name\n      Object.defineProperty(Constructor, 'name', {\n        value: capitalize(current.name),\n        writable: false\n      });\n\n      function defineProperties ({\n        constructor,\n        protoProps = [],\n        staticProps = []\n      }) {\n        const props = (protoProps.length > 0 && protoProps) || staticProps;\n        for (var i = 0; i < props.length; i++) {\n          let descriptor = props[i];\n          descriptor.enumerable = false;\n          descriptor.configurable = true;\n\n          if (protoProps.length > 0) {\n            Object.defineProperty(constructor.prototype, descriptor.name, {\n              value: descriptor\n            }); \n          }\n          if (staticProps.length > 0) {\n            Object.defineProperty(constructor.prototype, descriptor.key, {\n              value: descriptor.value\n            }); \n          }\n        }\n      }\n\n      // add static properties to Constructor\n      const staticProps = [\n        ...currentStaticProperties,\n        ...previousStaticProperties\n      ].map(key => ({ key, value: Module[key] }));\n\n      defineProperties({\n        constructor: Constructor,\n        staticProps\n      });\n\n      // add prototype properties to Constructor\n      defineProperties({\n        constructor: Constructor,\n        protoProps: Object.keys(methods).map(key => methods[key])\n      });\n\n      return {\n        ...previous,\n        [current.name]: Constructor\n      };\n    },\n    {}\n  ).catch(error => console.log(error));\n}\n"]}