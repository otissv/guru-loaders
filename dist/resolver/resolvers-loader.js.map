{"version":3,"sources":["../../src/resolver/resolvers-loader.js"],"names":["paths","map","p","pathSplit","split","fileName","length","mutation","match","query","require","Resolver","moduleName","default","name","type","module","console","log","loadResolverAsync","resolverObjList","Object","keys","reduce","previousList","currentObj","extendResolverAsync","reduceResolverModulesAsync","resolver","Mutation","Query","loadedResolverModules","previous","current","prototype","prev","methodName","moduleMethodName","toUpperCase","method","args","context","locals","canAccess","fn","Module","connectors","catch","error","schema","model","resolvers","definition","Error","resolverLoaderAsync"],"mappings":"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","file":"resolvers-loader.js","sourcesContent":["/*\n* Resolvers loader\n*/\n\n'use strict';\n\nimport Bluebird from 'bluebird';\nimport canAccessAsync from './canAccess-loader';\nimport connectorReducerAsync from './conncetors-reducer-loader';\nimport {\n  extendedResolverQuery\n} from '../graphql-extend/graphql-extend-resolver';\nimport camel from 'to-camel-case';\nimport snake from 'to-snake-case';\nimport {\n  capitalize,\n  getMethods,\n  mergeGlobPathsAsync,\n  pipeAsync\n} from '../utils';\n\nexport async function loadResolverAsync (paths) {\n  try {\n    return await Bluebird.map(paths, async p => {\n      try {\n        const pathSplit = p.split('/');\n        const fileName = pathSplit[pathSplit.length - 1];\n\n        const mutation = fileName.match('Mutation');\n        const query = fileName.match('Query');\n\n        const Resolver = await require(p);\n        const moduleName = camel(Resolver.default.name);\n\n        return {\n          name: moduleName,\n          type: (mutation && camel(mutation[0])) || (query && camel(query[0])),\n          module: Resolver.default\n        };\n      } catch (error) {\n        console.log(error);\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function extendResolverAsync (resolverObjList) {\n  // return resolverObjList\n  return Object.keys(\n    extendedResolverQuery\n  ).reduce((previousList, currentObj) => {\n    return [\n      ...previousList,\n      {\n        [currentObj]: {\n          type: 'query',\n          module: extendedResolverQuery[currentObj]\n        }\n      }\n    ];\n  }, resolverObjList);\n}\n\nexport const reduceResolverModulesAsync = loadedResolverModules => {\n  const resolver = {\n    Mutation: {},\n    Query: {}\n  };\n\n  return Bluebird.reduce(\n    loadedResolverModules,\n    (previous, current) => {\n      return getMethods(current.module.prototype).reduce((prev, methodName) => {\n        const moduleName = current.name;\n        const moduleMethodName = `${moduleName}${capitalize(methodName)}`;\n        const type = snake(methodName).toUpperCase();\n\n        let mutation = { ...prev.Mutation };\n        let query = { ...prev.Query };\n\n        const method = async (query, args, context) => {\n          try {\n            const canAccess = await canAccessAsync({\n              type,\n              locals: context.locals\n            });\n\n            const fn = ({ query, args, context }) => {\n              const Module = new context.connectors[moduleName]();\n              return Module[methodName]({ query, args, ...context });\n            };\n\n            return await canAccess({\n              query,\n              args,\n              context: {\n                ...context\n              },\n              fn\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        };\n\n        if (current.type === 'mutation') {\n          mutation = {\n            ...mutation,\n            [moduleMethodName]: method\n          };\n        } else {\n          query = {\n            ...query,\n            [moduleMethodName]: method\n          };\n        }\n\n        return {\n          Mutation: {\n            ...prev.Mutation,\n            ...mutation\n          },\n          Query: {\n            ...prev.Query,\n            ...query\n          }\n        };\n      }, previous);\n    },\n    resolver\n  ).catch(error => console.log(error));\n};\n\nexport default async function resolverLoaderAsync ({ schema, model }) {\n  try {\n    const loadedResolverModules = await pipeAsync([\n      mergeGlobPathsAsync('resolverMutation'),\n      mergeGlobPathsAsync('resolverQuery'),\n      loadResolverAsync\n      // extendResolverAsync\n    ])([]);\n\n    const resolvers = await reduceResolverModulesAsync(loadedResolverModules);\n    const connectors = await connectorReducerAsync(loadedResolverModules);\n\n    return {\n      connectors,\n      resolvers: {\n        ...resolvers,\n        ...schema.definition.context\n      }\n    };\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n"]}